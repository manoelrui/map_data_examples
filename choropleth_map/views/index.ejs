<!DOCTYPE html>
<html>
  <head>

      <title><%- title %></title>
      <meta charset="utf-8">

      <link rel="stylesheet" href="https://unpkg.com/leaflet@1.2.0/dist/leaflet.css"
            integrity="sha512-M2wvCLH6DSRazYeZRIm1JnYyh22purTM+FDB5CsyxtQJYeKq83arPe5wgbNmcFXGqiSH2XR8dT/fJISVA1r/zQ=="
            crossorigin="">

      <!-- Make sure you put this AFTER Leaflet's CSS -->
      <script src="https://unpkg.com/leaflet@1.2.0/dist/leaflet.js"
              integrity="sha512-lInM/apFSqyy1o6s89K4iQUKg6ppXEgsVxT35HbzUupEVRh2Eu9Wdl4tHj7dZO0s1uvplcYGmt3498TtHq+log=="
              crossorigin=""></script>

      <style>
          #mapid{
              height: 800px;
          }

          .info {
              padding: 6px 8px;
              font: 14px/16px Arial, Helvetica, sans-serif;
              background: white;
              background: rgba(255,255,255,0.8);
              box-shadow: 0 0 15px rgba(0,0,0,0.2);
              border-radius: 5px;
          }

          .info h4 {
              margin: 0 0 5px;
              color: #777;
          }

          .legend {
              line-height: 18px;
              color: #555;
          }

          .legend i {
              width: 18px;
              height: 18px;
              float: left;
              margin-right: 8px;
              opacity: 0.7;
          }
      </style>

  </head>

  <body>

      <div id="mapid">
      </div>


      <script>
          var geojson;
          var info = L.control();
          var legend = L.control({position: 'bottomright'});

          info.onAdd = function (map) {
              this._div = L.DomUtil.create('div', 'info'); // create a div with a class "info"
              this.update();
              return this._div;
          };

          // method that we will use to update the control based on feature properties passed
          info.update = function (props) {
              this._div.innerHTML = '<h4>US Population Density</h4>' +  (props ?
                  '<b>' + props.name + '</b><br />' + props.density + ' people / mi<sup>2</sup>'
                  : 'Hover over a state');
          };

          legend.onAdd = function (map) {

              var div = L.DomUtil.create('div', 'info legend'),
                  grades = [0, 10, 20, 50, 100, 200, 500, 1000],
                  labels = [];

              // loop through our density intervals and generate a label with a colored square for each interval
              for (var i = 0; i < grades.length; i++) {
                  div.innerHTML +=
                      '<i style="background:' + getColor(grades[i] + 1) + '"></i> ' +
                      grades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+');
              }

              return div;
          };


          function getColor(d) {
            return d > 1000 ? '#800026' :
            d > 500  ? '#BD0026' :
            d > 200  ? '#E31A1C' :
            d > 100  ? '#FC4E2A' :
            d > 50   ? '#FD8D3C' :
            d > 20   ? '#FEB24C' :
            d > 10   ? '#FED976' :
                       '#FFEDA0';
          }

          function style(feature) {
              return {
                  fillColor: getColor(feature.properties.density),
                  weight: 2,
                  opacity: 1,
                  color: 'white',
                  dashArray: '3',
                  fillOpacity: 0.7
              };
          }

          function highlightFeature(e) {
              var layer = e.target;

              layer.setStyle({
                  weight: 5,
                  color: '#666',
                  dashArray: '',
                  fillOpacity: 0.7
              });

              if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
                  layer.bringToFront();
              }

              info.update(layer.feature.properties);
          }

          function resetHighlight(e) {
              geojson.resetStyle(e.target);
              info.update()
          }

          function zoomToFeature(e) {
              map.fitBounds(e.target.getBounds());
          }

          function onEachFeature(feature, layer) {
              layer.on({
                  mouseover: highlightFeature,
                  mouseout: resetHighlight,
                  click: zoomToFeature
              });
          }

          var statesData = <%- JSON.stringify(boroughs) %>

          var map = L.map('mapid').setView([37.8, -96], 4);

          L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
              attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
          }).addTo(map);

          geojson = L.geoJson(statesData, {
              style: style,
              onEachFeature: onEachFeature
          }).addTo(map);

          info.addTo(map);

          legend.addTo(map);

      </script>

  </body>

</html>
